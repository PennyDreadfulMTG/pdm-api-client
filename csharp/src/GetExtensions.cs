// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PennyDreadfulMagic
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Get.
    /// </summary>
    public static partial class GetExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deckId'>
            /// </param>
            /// <param name='xFields'>
            /// An optional fields mask
            /// </param>
            public static Deck DeckMethod(this IGet operations, int deckId, string xFields = default(string))
            {
                return operations.DeckMethodAsync(deckId, xFields).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deckId'>
            /// </param>
            /// <param name='xFields'>
            /// An optional fields mask
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deck> DeckMethodAsync(this IGet operations, int deckId, string xFields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeckMethodWithHttpMessagesAsync(deckId, xFields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xFields'>
            /// An optional fields mask
            /// </param>
            public static Competition League(this IGet operations, string xFields = default(string))
            {
                return operations.LeagueAsync(xFields).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xFields'>
            /// An optional fields mask
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Competition> LeagueAsync(this IGet operations, string xFields = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LeagueWithHttpMessagesAsync(xFields, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
