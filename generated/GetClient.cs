// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace DecksiteAPI
{
    // Data plane generated client.
    /// <summary> The Get service client. </summary>
    public partial class GetClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of GetClient. </summary>
        public GetClient() : this(new Uri("/api"), new GetClientOptions())
        {
        }

        /// <summary> Initializes a new instance of GetClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public GetClient(Uri endpoint, GetClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new GetClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary>
        /// [Protocol Method] Grab a slice of finished sorted decks last updated after a certain point
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='UpdatedDecksAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> UpdatedDecksAsync(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.UpdatedDecks");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatedDecksRequest(xFields, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Grab a slice of finished sorted decks last updated after a certain point
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='UpdatedDecks(string,RequestContext)']/*" />
        public virtual Response UpdatedDecks(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.UpdatedDecks");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdatedDecksRequest(xFields, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deckId"> The <see cref="int"/> to use. </param>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='LoadDeckAsync(int,string,RequestContext)']/*" />
        public virtual async Task<Response> LoadDeckAsync(int deckId, string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.LoadDeck");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLoadDeckRequest(deckId, xFields, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="deckId"> The <see cref="int"/> to use. </param>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='LoadDeck(int,string,RequestContext)']/*" />
        public virtual Response LoadDeck(int deckId, string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.LoadDeck");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLoadDeckRequest(deckId, xFields, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='LeagueAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> LeagueAsync(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.League");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLeagueRequest(xFields, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='League(string,RequestContext)']/*" />
        public virtual Response League(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.League");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLeagueRequest(xFields, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='LoadRandomDeckAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> LoadRandomDeckAsync(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.LoadRandomDeck");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLoadRandomDeckRequest(xFields, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='LoadRandomDeck(string,RequestContext)']/*" />
        public virtual Response LoadRandomDeck(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.LoadRandomDeck");
            scope.Start();
            try
            {
                using HttpMessage message = CreateLoadRandomDeckRequest(xFields, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='RotationAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> RotationAsync(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.Rotation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRotationRequest(xFields, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="xFields"> An optional fields mask. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='Rotation(string,RequestContext)']/*" />
        public virtual Response Rotation(string xFields, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.Rotation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRotationRequest(xFields, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='SeasonCodesAsync(RequestContext)']/*" />
        public virtual async Task<Response> SeasonCodesAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.SeasonCodes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSeasonCodesRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method]
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/GetClient.xml" path="doc/members/member[@name='SeasonCodes(RequestContext)']/*" />
        public virtual Response SeasonCodes(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("GetClient.SeasonCodes");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSeasonCodesRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateUpdatedDecksRequest(string xFields, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/decks/updated/", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (xFields != null)
            {
                request.Headers.Add("X-Fields", xFields);
            }
            return message;
        }

        internal HttpMessage CreateLoadDeckRequest(int deckId, string xFields, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/decks/", false);
            uri.AppendPath(deckId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (xFields != null)
            {
                request.Headers.Add("X-Fields", xFields);
            }
            return message;
        }

        internal HttpMessage CreateLeagueRequest(string xFields, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/league", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (xFields != null)
            {
                request.Headers.Add("X-Fields", xFields);
            }
            return message;
        }

        internal HttpMessage CreateLoadRandomDeckRequest(string xFields, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/randomlegaldeck", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (xFields != null)
            {
                request.Headers.Add("X-Fields", xFields);
            }
            return message;
        }

        internal HttpMessage CreateRotationRequest(string xFields, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/rotation", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (xFields != null)
            {
                request.Headers.Add("X-Fields", xFields);
            }
            return message;
        }

        internal HttpMessage CreateSeasonCodesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/seasoncodes", false);
            request.Uri = uri;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
