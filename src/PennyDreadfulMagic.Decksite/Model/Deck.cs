/* 
 * decksite API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = PennyDreadfulMagic.Decksite.Client.SwaggerDateConverter;

namespace PennyDreadfulMagic.Decksite.Model
{
    /// <summary>
    /// Deck
    /// </summary>
    [DataContract]
    public partial class Deck :  IEquatable<Deck>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Deck" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="updatedDate">updatedDate.</param>
        /// <param name="wins">wins.</param>
        /// <param name="losses">losses.</param>
        /// <param name="finish">finish.</param>
        /// <param name="archetypeId">archetypeId.</param>
        /// <param name="archetypeName">archetypeName.</param>
        /// <param name="sourceUrl">sourceUrl.</param>
        /// <param name="competitionId">competitionId.</param>
        /// <param name="competitionName">competitionName.</param>
        /// <param name="person">person.</param>
        /// <param name="decklistHash">decklistHash.</param>
        /// <param name="retired">retired.</param>
        /// <param name="colors">colors.</param>
        /// <param name="omw">omw.</param>
        /// <param name="seasonId">seasonId.</param>
        /// <param name="maindeck">maindeck.</param>
        /// <param name="sideboard">sideboard.</param>
        public Deck(string name = default(string), DateTime? createdDate = default(DateTime?), DateTime? updatedDate = default(DateTime?), int? wins = default(int?), int? losses = default(int?), int? finish = default(int?), int? archetypeId = default(int?), string archetypeName = default(string), string sourceUrl = default(string), int? competitionId = default(int?), string competitionName = default(string), string person = default(string), string decklistHash = default(string), bool? retired = default(bool?), List<string> colors = default(List<string>), int? omw = default(int?), int? seasonId = default(int?), List<DecklistEntry> maindeck = default(List<DecklistEntry>), List<DecklistEntry> sideboard = default(List<DecklistEntry>))
        {
            this.Name = name;
            this.CreatedDate = createdDate;
            this.UpdatedDate = updatedDate;
            this.Wins = wins;
            this.Losses = losses;
            this.Finish = finish;
            this.ArchetypeId = archetypeId;
            this.ArchetypeName = archetypeName;
            this.SourceUrl = sourceUrl;
            this.CompetitionId = competitionId;
            this.CompetitionName = competitionName;
            this.Person = person;
            this.DecklistHash = decklistHash;
            this.Retired = retired;
            this.Colors = colors;
            this.Omw = omw;
            this.SeasonId = seasonId;
            this.Maindeck = maindeck;
            this.Sideboard = sideboard;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public DateTime? UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Wins
        /// </summary>
        [DataMember(Name="wins", EmitDefaultValue=false)]
        public int? Wins { get; set; }

        /// <summary>
        /// Gets or Sets Losses
        /// </summary>
        [DataMember(Name="losses", EmitDefaultValue=false)]
        public int? Losses { get; set; }

        /// <summary>
        /// Gets or Sets Finish
        /// </summary>
        [DataMember(Name="finish", EmitDefaultValue=false)]
        public int? Finish { get; set; }

        /// <summary>
        /// Gets or Sets ArchetypeId
        /// </summary>
        [DataMember(Name="archetype_id", EmitDefaultValue=false)]
        public int? ArchetypeId { get; set; }

        /// <summary>
        /// Gets or Sets ArchetypeName
        /// </summary>
        [DataMember(Name="archetype_name", EmitDefaultValue=false)]
        public string ArchetypeName { get; set; }

        /// <summary>
        /// Gets or Sets SourceUrl
        /// </summary>
        [DataMember(Name="source_url", EmitDefaultValue=false)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets CompetitionId
        /// </summary>
        [DataMember(Name="competition_id", EmitDefaultValue=false)]
        public int? CompetitionId { get; set; }

        /// <summary>
        /// Gets or Sets CompetitionName
        /// </summary>
        [DataMember(Name="competition_name", EmitDefaultValue=false)]
        public string CompetitionName { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public string Person { get; set; }

        /// <summary>
        /// Gets or Sets DecklistHash
        /// </summary>
        [DataMember(Name="decklist_hash", EmitDefaultValue=false)]
        public string DecklistHash { get; set; }

        /// <summary>
        /// Gets or Sets Retired
        /// </summary>
        [DataMember(Name="retired", EmitDefaultValue=false)]
        public bool? Retired { get; set; }

        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name="colors", EmitDefaultValue=false)]
        public List<string> Colors { get; set; }

        /// <summary>
        /// Gets or Sets Omw
        /// </summary>
        [DataMember(Name="omw", EmitDefaultValue=false)]
        public int? Omw { get; set; }

        /// <summary>
        /// Gets or Sets SeasonId
        /// </summary>
        [DataMember(Name="season_id", EmitDefaultValue=false)]
        public int? SeasonId { get; set; }

        /// <summary>
        /// Gets or Sets Maindeck
        /// </summary>
        [DataMember(Name="maindeck", EmitDefaultValue=false)]
        public List<DecklistEntry> Maindeck { get; set; }

        /// <summary>
        /// Gets or Sets Sideboard
        /// </summary>
        [DataMember(Name="sideboard", EmitDefaultValue=false)]
        public List<DecklistEntry> Sideboard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Deck {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  Wins: ").Append(Wins).Append("\n");
            sb.Append("  Losses: ").Append(Losses).Append("\n");
            sb.Append("  Finish: ").Append(Finish).Append("\n");
            sb.Append("  ArchetypeId: ").Append(ArchetypeId).Append("\n");
            sb.Append("  ArchetypeName: ").Append(ArchetypeName).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  CompetitionId: ").Append(CompetitionId).Append("\n");
            sb.Append("  CompetitionName: ").Append(CompetitionName).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  DecklistHash: ").Append(DecklistHash).Append("\n");
            sb.Append("  Retired: ").Append(Retired).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  Omw: ").Append(Omw).Append("\n");
            sb.Append("  SeasonId: ").Append(SeasonId).Append("\n");
            sb.Append("  Maindeck: ").Append(Maindeck).Append("\n");
            sb.Append("  Sideboard: ").Append(Sideboard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Deck);
        }

        /// <summary>
        /// Returns true if Deck instances are equal
        /// </summary>
        /// <param name="input">Instance of Deck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Deck input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.Wins == input.Wins ||
                    (this.Wins != null &&
                    this.Wins.Equals(input.Wins))
                ) && 
                (
                    this.Losses == input.Losses ||
                    (this.Losses != null &&
                    this.Losses.Equals(input.Losses))
                ) && 
                (
                    this.Finish == input.Finish ||
                    (this.Finish != null &&
                    this.Finish.Equals(input.Finish))
                ) && 
                (
                    this.ArchetypeId == input.ArchetypeId ||
                    (this.ArchetypeId != null &&
                    this.ArchetypeId.Equals(input.ArchetypeId))
                ) && 
                (
                    this.ArchetypeName == input.ArchetypeName ||
                    (this.ArchetypeName != null &&
                    this.ArchetypeName.Equals(input.ArchetypeName))
                ) && 
                (
                    this.SourceUrl == input.SourceUrl ||
                    (this.SourceUrl != null &&
                    this.SourceUrl.Equals(input.SourceUrl))
                ) && 
                (
                    this.CompetitionId == input.CompetitionId ||
                    (this.CompetitionId != null &&
                    this.CompetitionId.Equals(input.CompetitionId))
                ) && 
                (
                    this.CompetitionName == input.CompetitionName ||
                    (this.CompetitionName != null &&
                    this.CompetitionName.Equals(input.CompetitionName))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.DecklistHash == input.DecklistHash ||
                    (this.DecklistHash != null &&
                    this.DecklistHash.Equals(input.DecklistHash))
                ) && 
                (
                    this.Retired == input.Retired ||
                    (this.Retired != null &&
                    this.Retired.Equals(input.Retired))
                ) && 
                (
                    this.Colors == input.Colors ||
                    this.Colors != null &&
                    this.Colors.SequenceEqual(input.Colors)
                ) && 
                (
                    this.Omw == input.Omw ||
                    (this.Omw != null &&
                    this.Omw.Equals(input.Omw))
                ) && 
                (
                    this.SeasonId == input.SeasonId ||
                    (this.SeasonId != null &&
                    this.SeasonId.Equals(input.SeasonId))
                ) && 
                (
                    this.Maindeck == input.Maindeck ||
                    this.Maindeck != null &&
                    this.Maindeck.SequenceEqual(input.Maindeck)
                ) && 
                (
                    this.Sideboard == input.Sideboard ||
                    this.Sideboard != null &&
                    this.Sideboard.SequenceEqual(input.Sideboard)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                if (this.Wins != null)
                    hashCode = hashCode * 59 + this.Wins.GetHashCode();
                if (this.Losses != null)
                    hashCode = hashCode * 59 + this.Losses.GetHashCode();
                if (this.Finish != null)
                    hashCode = hashCode * 59 + this.Finish.GetHashCode();
                if (this.ArchetypeId != null)
                    hashCode = hashCode * 59 + this.ArchetypeId.GetHashCode();
                if (this.ArchetypeName != null)
                    hashCode = hashCode * 59 + this.ArchetypeName.GetHashCode();
                if (this.SourceUrl != null)
                    hashCode = hashCode * 59 + this.SourceUrl.GetHashCode();
                if (this.CompetitionId != null)
                    hashCode = hashCode * 59 + this.CompetitionId.GetHashCode();
                if (this.CompetitionName != null)
                    hashCode = hashCode * 59 + this.CompetitionName.GetHashCode();
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                if (this.DecklistHash != null)
                    hashCode = hashCode * 59 + this.DecklistHash.GetHashCode();
                if (this.Retired != null)
                    hashCode = hashCode * 59 + this.Retired.GetHashCode();
                if (this.Colors != null)
                    hashCode = hashCode * 59 + this.Colors.GetHashCode();
                if (this.Omw != null)
                    hashCode = hashCode * 59 + this.Omw.GetHashCode();
                if (this.SeasonId != null)
                    hashCode = hashCode * 59 + this.SeasonId.GetHashCode();
                if (this.Maindeck != null)
                    hashCode = hashCode * 59 + this.Maindeck.GetHashCode();
                if (this.Sideboard != null)
                    hashCode = hashCode * 59 + this.Sideboard.GetHashCode();
                return hashCode;
            }
        }
    }

}
